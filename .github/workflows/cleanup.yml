# This workflow deletes workflow cache entries from closed pull requests.
#
# Due to cache isolation in GitHub Actions, they won't be accessible anywhere else.
# This saves storage and prevents inadvertent eviction of frequently used cache entries (also known as cache thrashing).
# https://docs.github.com/en/actions/reference/workflows-and-actions/dependency-caching#restrictions-for-accessing-a-cache
# https://docs.github.com/en/actions/how-tos/manage-workflow-runs/manage-caches#force-deleting-cache-entries
# https://github.com/actions/cache/blob/main/tips-and-workarounds.md#force-deletion-of-caches-overriding-default-cache-eviction-policy
#
# It is triggered automatically by merging or closing any pull request.

name: Cleanup

on:
  pull_request:
    types:
      - closed

jobs:
  clean-up-workflow-cache:
    name: Clean up workflow cache
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 1
    permissions:
      # To list and delete workflow cache entries.
      # https://docs.github.com/en/rest/actions/cache?apiVersion=2022-11-28#delete-a-github-actions-cache-for-a-repository-using-a-cache-id
      actions: write
    steps:
      - name: Delete obsolete workflow cache entries
        # language=sh
        run: |
          CACHE_IDS_TO_DELETE=$(gh cache list --ref "$BRANCH" --limit 100 --json id --jq '.[].id')

          # Make the script run to completion even if `gh cache` fails for some cache entries.
          set +e

          for CACHE_ID in $CACHE_IDS_TO_DELETE; do
              gh cache delete "$CACHE_ID"
              echo "Deleted cache $CACHE_ID on branch $BRANCH"
          done
        env:
          # Delete cache entries of the pull request ref.
          # https://cli.github.com/manual/gh_cache_delete
          BRANCH: refs/pull/${{ github.event.pull_request.number }}/merge
          #
          # An authentication token for the GitHub CLI (`gh`):
          # https://cli.github.com/manual/gh_help_environment
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
